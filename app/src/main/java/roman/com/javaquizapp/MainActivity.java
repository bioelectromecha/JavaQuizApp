package roman.com.javaquizapp;

import android.databinding.DataBindingUtil;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Toast;

import roman.com.javaquizapp.databinding.ActivityMainBinding;


/**
 * Main and only activity
 */
public class MainActivity extends AppCompatActivity {

    /**
     * enum for the questions, what is a better way?
     */
    private enum Question {
        QUESTION1, QUESTION2, QUESTION3, QUESTION4;

        //method will get the next question enum
        public Question getNext() {
            return values()[(ordinal() + 1) % values().length];
        }
    }

    //holds the current question enum
    private Question mCurrentQuestion;

    // whether the button is in "check", or if false - in "continue" mode
    private boolean mIsButtonInCheckMode = true;

    // whether the user has answered the last question
    private boolean mIsDone = false;

    //basically the number of questions
    private static final int MAX_SCORE = 4;

    //keeps the user's score
    private int mQuizScore = 0;

    //autogenerated class by the databinding library
    private ActivityMainBinding mBinding;

    /**
     * this is the method called to connect the xml to java and initialize everything
     *
     * @param savedInstanceState
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //get the binding object for activity_main.xml
        mBinding = DataBindingUtil.setContentView(this, R.layout.activity_main);
        mCurrentQuestion = Question.QUESTION1;
    }


    /**
     * onClick Method for the check/continue button
     *
     * @param view
     */
    public void onCheckButtonClicked(View view) {
        //if user answered all questions, do no more
        if (mIsDone) {
            Toast.makeText(this, "You've answered " + mQuizScore + "/" + MAX_SCORE + " questions correctly!", Toast.LENGTH_LONG).show();
            return;
        }
        if (mIsButtonInCheckMode) {
            handleQuestionCheck();
            mIsButtonInCheckMode = false;
            mBinding.activtyMainIncludedContent.checkButton.setText(R.string.button_continue);
        } else {
            goToNextQuestion();
            mIsButtonInCheckMode = true;
            mBinding.activtyMainIncludedContent.checkButton.setText(R.string.button_check);
        }
        //user has answered the last question
        if (mCurrentQuestion.equals(Question.QUESTION4) && !mIsButtonInCheckMode) {
            mIsDone = true;
        }
    }

    /**
     * logic for getting users answer and deciding if correct or not
     */
    private void handleQuestionCheck() {
        switch (mCurrentQuestion) {
            case QUESTION1:
                handleQuestion1();
                break;
            case QUESTION2:
                handleQuestion2();
                break;
            case QUESTION3:
                handleQuestion3();
                break;
            case QUESTION4:
                handleQuestion4();
                break;
        }
    }


    /**
     * hide the previous question and show the current one
     */
    private void goToNextQuestion() {
        switch (mCurrentQuestion) {
            case QUESTION1:
                mBinding.activtyMainIncludedContent.question1IncludeContent.question1Layout.setVisibility(View.GONE);
                mBinding.activtyMainIncludedContent.question2IncludeContent.question2Layout.setVisibility(View.VISIBLE);
                mBinding.question2StatusIndicator.setImageDrawable(getDrawable(R.drawable.question_done));
                break;
            case QUESTION2:
                mBinding.activtyMainIncludedContent.question2IncludeContent.question2Layout.setVisibility(View.GONE);
                mBinding.activtyMainIncludedContent.question3IncludeContent.question3Layout.setVisibility(View.VISIBLE);
                mBinding.question3StatusIndicator.setImageDrawable(getDrawable(R.drawable.question_done));
                break;
            case QUESTION3:
                mBinding.activtyMainIncludedContent.question3IncludeContent.question3Layout.setVisibility(View.GONE);
                mBinding.activtyMainIncludedContent.question4IncludeContent.question4Layout.setVisibility(View.VISIBLE);
                mBinding.question4StatusIndicator.setImageDrawable(getDrawable(R.drawable.question_done));
                break;
            case QUESTION4:
                // do ..... ?
                break;
        }
        mCurrentQuestion = mCurrentQuestion.getNext();
    }


    /**
     * logic for getting users answer and deciding if correct or not
     */
    private void handleQuestion1() {
        //check if it's the correct answer
        if (mBinding.activtyMainIncludedContent.question1IncludeContent.radioButtonGroup.getCheckedRadioButtonId()
                == mBinding.activtyMainIncludedContent.question1IncludeContent.question1CorrectAnswerButton.getId()) {
            showCorrectToast();
            mQuizScore++;
        } else {
            showIncorrectToast();
        }
    }

    /**
     * logic for getting users answer and deciding if correct or not
     */
    private void handleQuestion2() {
        //check if it's the correct answer
        if (mBinding.activtyMainIncludedContent.question2IncludeContent.question2CorrectAnswer1.isChecked()
                && mBinding.activtyMainIncludedContent.question2IncludeContent.question2CorrectAnswer2.isChecked()) {
            showCorrectToast();
            mQuizScore++;
        } else {
            showIncorrectToast();
        }
    }

    /**
     * logic for getting users answer and deciding if correct or not
     */
    private void handleQuestion3() {
        //check if it's the correct answer
        if (mBinding.activtyMainIncludedContent.question3IncludeContent.question3AnswerEdittext
                .getText().toString().equals(getResources().getString(R.string.question_3_correct_answer))) {
            showCorrectToast();
            mQuizScore++;
        } else {
            showIncorrectToast();
        }
    }

    /**
     * logic for getting users answer and deciding if correct or not
     */
    private void handleQuestion4() {
        //check if it's the correct answer
        if (mBinding.activtyMainIncludedContent.question4IncludeContent.question4AnswerEdittext
                .getText().toString().equals(getResources().getString(R.string.question_4_correct_answer))) {
            showCorrectToast();
            mQuizScore++;
        } else {
            showIncorrectToast();
        }
    }

    /**
     * show a toast telling the user he/she were correct
     */
    private void showCorrectToast() {
        Toast.makeText(this, "CORRECT!", Toast.LENGTH_LONG).show();
    }


    /**
     * show a toast telling the user he/she were incorrect
     */
    private void showIncorrectToast() {
        Toast.makeText(this, "INCORRECT!", Toast.LENGTH_LONG).show();
    }
}
